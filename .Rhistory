dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
Lit <- mif2(TSIR, Nmif = 10, Np = 100, #10 was 10000
rw.sd = rw.sd(
Sbar=0),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(Lit)
360.9999^2
dmeas <- Csnippet("
double rho = 1/b1;
if (rho < 1) {
rho = 1/b1;
} else {
rho = 1;
}
double mn = lambda*rho;
double tol = 1.0e-18;
double v = psi*psi; //mn*(1.0-rho + psi*psi*mn);
if (cases > 0.0) {
lik = pnorm(cases+0.5,mn,sqrt(v)+tol,1,0)-pnorm(cases-0.5,mn,sqrt(v)+tol,1,0)+tol;
} else {
lik =  pnorm(cases+0.5,mn,sqrt(v)+tol,1,0)+tol;
}
if (give_log) lik = log(lik);
")
rmeas <- Csnippet("
double rho = 1/b1;
if (rho < 1) {
rho = 1/b1;
} else {
rho = 1;
}
//double rho = 0.4623;
double mn = lambda*rho;
double tol = 1.0e-18;
double v =  psi*psi ; //mn*(1.0-rho + psi*psi*mn);
cases = rnorm(mn,sqrt(v)+tol);
if (cases > 0.0) {
cases = nearbyint(cases);
} else {
cases = 0.0;}
")
name<-names <-c("London")
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 360.9999),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
TSIR %>%
simulate(params=coef(m1),nsim=5,as.data.frame=TRUE,include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=sim,color=(sim=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~sim,ncol=2)+ ggtitle("TSIR Cases Reconstruction")+theme_bw()
TSIR %>%
simulate(params=coef(m1),nsim=100,as.data.frame=TRUE,include.data=TRUE) %>%
subset(select=c(time,sim,cases)) %>%
mutate(data=sim=="data") %>%
ddply(~time+data,summarize,
p=c(0.05,0.5,0.95),q=quantile(cases,prob=p,names=FALSE)) %>%
mutate(p=mapvalues(p,from=c(0.05,0.5,0.95),to=c("lo","med","hi")),
data=mapvalues(data,from=c(TRUE,FALSE),to=c("data","simulation"))) %>%
dcast(time+data~p,value.var='q') %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)+ theme_bw() + ylab("cases") + ggtitle("TSIR  reconstructed cases variability with Data")
Lit <- mif2(TSIR, Nmif = 10, Np = 100, #10 was 10000
rw.sd = rw.sd(
Sbar=0),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(Lit)
firstFit <- mif2(TSIR, Nmif = 70, Np = 1000, #10 was 10000
rw.sd = rw.sd(
psi = .3),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(firstFit)
coef(firstFit)
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 1.310763e+03),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
TSIR %>%
simulate(params=coef(m1),nsim=5,as.data.frame=TRUE,include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=sim,color=(sim=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~sim,ncol=2)+ ggtitle("TSIR Cases Reconstruction")+theme_bw()
toEst <- Csnippet("
Tm = log(m);
TB1 = log(B1);
TB2 = log(B2);
TB3 = log(B3);
TB4 = log(B4);
TB5 = log(B5);
TB6 = log(B6);
TB7 = log(B7);
TB8 = log(B8);
TB9 = log(B9);
TB10 = log(B10);
TB11 = log(B11);
TB12 = log(B12);
TB13 = log(B13);
TB14 = log(B14);
TB15 = log(B15);
TB16 = log(B16);
TB17 = log(B17);
TB18 = log(B18);
TB19 = log(B19);
TB20 = log(B20);
TB21 = log(B21);
TB22 = log(B22);
TB23 = log(B23);
TB24 = log(B24);
TB25 = log(B25);
TB26 = log(B26);
Talpha = logit(alpha);
Tphi = logit(phi);
TSbar = log(Sbar);
//Trho = logit(rho);
Tpsi = log(psi);
")
fromEst <- Csnippet("
Tm = exp(m);
Tpsi = exp(psi);
TB1 = exp(B1);
TB2 = exp(B2);
TB3 = exp(B3);
TB4 = exp(B4);
TB5 = exp(B5);
TB6 = exp(B6);
TB7 = exp(B7);
TB8 = exp(B8);
TB9 = exp(B9);
TB10 = exp(B10);
TB11 = exp(B11);
TB12 = exp(B12);
TB13 = exp(B13);
TB14 = exp(B14);
TB15 = exp(B15);
TB16 = exp(B16);
TB17 = exp(B17);
TB18 = exp(B18);
TB19 = exp(B19);
TB20 = exp(B20);
TB21 = exp(B21);
TB22 = exp(B22);
TB23 = exp(B23);
TB24 = exp(B24);
TB25 = exp(B25);
TB26 = exp(B26);
Talpha = expit(alpha);
Tphi = expit(phi);
//Trho = expit(rho);
TSbar = exp(Sbar);
")
initlz <- Csnippet("
I = Tcases;
lambda = Tcases;
//S =  Sbar + Z;
")
stochStep <- Csnippet("
double B;
#define max(x, y) (((x) > (y)) ? (x) : (y))
#define min(x, y) (((x) < (y)) ? (x) : (y))
// By-week time  seasonality
int  tstar = (t - 1944)*26.01786;
if (tstar  % 26 == 1)
B = B1;
else if (tstar  % 26 == 2)
B = B2;
else if (tstar  % 26 == 3)
B = B3;
else if (tstar  % 26 == 4)
B = B4;
else if (tstar  % 26 == 5)
B = B5;
else if (tstar  % 26 == 6)
B = B6;
else if (tstar  % 26 == 7)
B = B7;
else if (tstar  % 26 == 8)
B = B8;
else if (tstar  % 26 == 9)
B = B9;
else if (tstar  % 26 == 10)
B = B10;
else if (tstar  % 26 == 11)
B = B11;
else if (tstar  % 26 == 12)
B = B12;
else if (tstar  % 26 == 13)
B = B13;
else if (tstar  % 26 == 14)
B = B14;
else if (tstar  % 26 == 15)
B = B15;
else if (tstar  % 26 == 16)
B = B16;
else if (tstar  % 26 == 17)
B = B17;
else if (tstar  % 26 == 18)
B = B18;
else if (tstar  % 26 == 19)
B = B19;
else if (tstar  % 26 == 20)
B = B20;
else if (tstar  % 26 == 21)
B = B21;
else if (tstar  % 26 == 22)
B = B22;
else if (tstar  % 26 == 23)
B = B23;
else if (tstar  % 26 == 24)
B = B24;
else if (tstar  % 26 == 25)
B = B25;
else
B = B26;
theta = rpois(m);
lambda = min( Sbar + Z,  B*(Sbar + Z)*pow(Tcases + theta,alpha));  // working great lambda was I
double rho = 1/b1;
if (rho < 1) {
rho = 1/b1;
} else {
rho = 1;
}
case = Tcases/b1;
err =   case - lambda*rho ;
")
dmeas <- Csnippet("
double rho = 1/b1;
if (rho < 1) {
rho = 1/b1;
} else {
rho = 1;
}
double mn = lambda*rho;
double tol = 1.0e-18;
double v = psi*psi + mn*phi ; //mn*(1.0-rho + psi*psi*mn);
if (cases > 0.0) {
lik = pnorm(cases+0.5,mn,sqrt(v)+tol,1,0)-pnorm(cases-0.5,mn,sqrt(v)+tol,1,0)+tol;
} else {
lik =  pnorm(cases+0.5,mn,sqrt(v)+tol,1,0)+tol;
}
if (give_log) lik = log(lik);
")
rmeas <- Csnippet("
double rho = 1/b1;
if (rho < 1) {
rho = 1/b1;
} else {
rho = 1;
}
//double rho = 0.4623;
double mn = lambda*rho;
double tol = 1.0e-18;
double v =  psi*psi + mn*phi  ; //mn*(1.0-rho + psi*psi*mn);
cases = rnorm(mn,sqrt(v)+tol);
if (cases > 0.0) {
cases = nearbyint(cases);
} else {
cases = 0.0;}
")
name<-names <-c("London")
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi", "phi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 1.310763e+03, phi= .3),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
TSIR %>%
simulate(params=coef(m1),nsim=5,as.data.frame=TRUE,include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=sim,color=(sim=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~sim,ncol=2)+ ggtitle("TSIR Cases Reconstruction")+theme_bw()
TSIR %>%
simulate(params=coef(m1),nsim=100,as.data.frame=TRUE,include.data=TRUE) %>%
subset(select=c(time,sim,cases)) %>%
mutate(data=sim=="data") %>%
ddply(~time+data,summarize,
p=c(0.05,0.5,0.95),q=quantile(cases,prob=p,names=FALSE)) %>%
mutate(p=mapvalues(p,from=c(0.05,0.5,0.95),to=c("lo","med","hi")),
data=mapvalues(data,from=c(TRUE,FALSE),to=c("data","simulation"))) %>%
dcast(time+data~p,value.var='q') %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)+ theme_bw() + ylab("cases") + ggtitle("TSIR  reconstructed cases variability with Data")
Lit <- mif2(TSIR, Nmif = 10, Np = 100, #10 was 10000
rw.sd = rw.sd(
Sbar=0),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(Lit)
firstFit <- mif2(TSIR, Nmif = 70, Np = 1000, #10 was 10000
rw.sd = rw.sd(
psi = .3, phi = .3),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(firstFit)
coef()
coef(firstFit)
firstFit <- mif2(TSIR, Nmif = 70, Np = 1000, #10 was 10000
rw.sd = rw.sd(
psi = .7, phi = .7),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(firstFit)
coef(firstFit)
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi", "phi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 1.323919e+03, phi= 5.714881e-04),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
TSIR %>%
simulate(params=coef(m1),nsim=5,as.data.frame=TRUE,include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=sim,color=(sim=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~sim,ncol=2)+ ggtitle("TSIR Cases Reconstruction")+theme_bw()
TSIR %>%
simulate(params=coef(m1),nsim=100,as.data.frame=TRUE,include.data=TRUE) %>%
subset(select=c(time,sim,cases)) %>%
mutate(data=sim=="data") %>%
ddply(~time+data,summarize,
p=c(0.05,0.5,0.95),q=quantile(cases,prob=p,names=FALSE)) %>%
mutate(p=mapvalues(p,from=c(0.05,0.5,0.95),to=c("lo","med","hi")),
data=mapvalues(data,from=c(TRUE,FALSE),to=c("data","simulation"))) %>%
dcast(time+data~p,value.var='q') %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)+ theme_bw() + ylab("cases") + ggtitle("TSIR  reconstructed cases variability with Data")
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi", "phi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 1.323919e+03, phi= 5.714881e-04),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
firstFit <- mif2(TSIR, Nmif = 70, Np = 1000, #10 was 10000
rw.sd = rw.sd(
psi = .3, phi = .3),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi", "phi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 400, phi= 5.714881e-04),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
TSIR %>%
simulate(params=coef(m1),nsim=5,as.data.frame=TRUE,include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=sim,color=(sim=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~sim,ncol=2)+ ggtitle("TSIR Cases Reconstruction")+theme_bw()
TSIR %>%
simulate(params=coef(m1),nsim=100,as.data.frame=TRUE,include.data=TRUE) %>%
subset(select=c(time,sim,cases)) %>%
mutate(data=sim=="data") %>%
ddply(~time+data,summarize,
p=c(0.05,0.5,0.95),q=quantile(cases,prob=p,names=FALSE)) %>%
mutate(p=mapvalues(p,from=c(0.05,0.5,0.95),to=c("lo","med","hi")),
data=mapvalues(data,from=c(TRUE,FALSE),to=c("data","simulation"))) %>%
dcast(time+data~p,value.var='q') %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)+ theme_bw() + ylab("cases") + ggtitle("TSIR  reconstructed cases variability with Data")
Lit <- mif2(TSIR, Nmif = 10, Np = 100, #10 was 10000
rw.sd = rw.sd(
Sbar=0),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(Lit)
firstFit <- mif2(TSIR, Nmif = 70, Np = 1000, #10 was 10000
rw.sd = rw.sd(
psi = .3, phi = .3),
transform = T,
cooling.type = "geometric", cooling.fraction.50 = .05,
tol = 1e-17, max.fail = Inf, verbose = getOption("verbose"))
logLik(firstFit)
coef(firstFit)
pomp(London_cases,times="time",t0=1944,
rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1/26.01786),
paramnames=c("m","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","B11",
"B12","B13","B14","B15","B16","B17","B18","B19","B20","B21",
"B22","B23","B24","B25","B26",
"alpha","Sbar", "psi", "phi"),
initializer=initlz,
params = c(m=13, B1 = 1.285935e-05, B2 = 1.214533e-05, B3 = 1.464063e-05, B4 = 1.277254e-05, B5 = 1.236623e-05, B6 = 1.181611e-05,
B7 = 1.059032e-05, B8 = 1.183479e-05, B9 = 1.024478e-05, B10 = 1.099727e-05,
B11 = 1.065480e-05, B12 = 1.136872e-05, B13 = 9.970371e-06, B14 = 9.655970e-06, B15 = 8.828046e-06, B16 = 8.999024e-06 ,
B17 = 6.775660e-06, B18 = 6.917613e-06, B19 = 7.245048e-06, B20 = 1.110509e-05,
B21 = 1.418629e-05, B22 = 1.017632e-05, B23 = 1.180947e-05, B24 = 1.052219e-05, B25 = 1.050035e-05 , B26 = 1.175871e-05,
alpha = 9.70e-01 ,Sbar = 114281.6, psi = 1.360997e+03, phi= 4.936108e-08),
statenames=c("case","I","lambda","theta","err"),
rmeasure = rmeas,
dmeasure = dmeas,
toEstimationScale = toEst,
fromEstimationScale = fromEst,
covar = Covar,
tcovar= "time") ->  m1 ->TSIR
TSIR %>%
simulate(params=coef(m1),nsim=5,as.data.frame=TRUE,include.data=TRUE) %>%
ggplot(aes(x=time,y=cases,group=sim,color=(sim=="data")))+
guides(color=FALSE)+
geom_line()+facet_wrap(~sim,ncol=2)+ ggtitle("TSIR Cases Reconstruction")+theme_bw()
TSIR %>%
simulate(params=coef(m1),nsim=100,as.data.frame=TRUE,include.data=TRUE) %>%
subset(select=c(time,sim,cases)) %>%
mutate(data=sim=="data") %>%
ddply(~time+data,summarize,
p=c(0.05,0.5,0.95),q=quantile(cases,prob=p,names=FALSE)) %>%
mutate(p=mapvalues(p,from=c(0.05,0.5,0.95),to=c("lo","med","hi")),
data=mapvalues(data,from=c(TRUE,FALSE),to=c("data","simulation"))) %>%
dcast(time+data~p,value.var='q') %>%
ggplot(aes(x=time,y=med,color=data,fill=data,ymin=lo,ymax=hi))+
geom_ribbon(alpha=0.2)+ theme_bw() + ylab("cases") + ggtitle("TSIR  reconstructed cases variability with Data")
4.936108e-08*10000
getwd()
